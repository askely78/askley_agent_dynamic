import os
from typing import Dict
from fastapi import FastAPI, Request, Form
from fastapi.responses import JSONResponse
from twilio.rest import Client

app = FastAPI()

# Variables d'environnement correctement nomm√©es
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_WHATSAPP_FROM")  # Format : whatsapp:+14155238886

client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

# M√©moire des utilisateurs (par session)
session_memory: Dict[str, Dict[str, str]] = {}

@app.get("/")
def read_root():
    return {"message": "Askley backend is live ‚úÖ"}

@app.post("/whatsapp-webhook")
async def whatsapp_webhook(
    request: Request,
    From: str = Form(...),
    Body: str = Form(...)
):
    print(f"üì• Message re√ßu de {From} : {Body}")
    body_lower = Body.lower()
    message_texte = ""

    if From not in session_memory:
        session_memory[From] = {}

    # Logique des intentions
    if "h√¥tel" in body_lower:
        session_memory[From]["last_intent"] = "hotel"
        message_texte = "üè® Pour quelle ville et quelles dates souhaitez-vous r√©server un h√¥tel ?"
    elif "restaurant" in body_lower:
        session_memory[From]["last_intent"] = "restaurant"
        message_texte = "üçΩÔ∏è Dans quelle ville souhaitez-vous r√©server un restaurant ?"
    elif "plat" in body_lower or "commander" in body_lower:
        session_memory[From]["last_intent"] = "plat"
        message_texte = "ü•ò Quels plats souhaitez-vous commander ? (couscous, tajine, tanjia, etc.)"
    elif "artisan" in body_lower:
        session_memory[From]["last_intent"] = "artisan"
        message_texte = "üßµ Quel type de produits artisanaux cherchez-vous ?"
    elif "maison" in body_lower:
        session_memory[From]["last_intent"] = "maison"
        message_texte = "üè° D√©couvrez nos plats faits maison. Qu‚Äôest-ce qui vous ferait plaisir ?"
    elif "duty free" in body_lower or "offre" in body_lower:
        session_memory[From]["last_intent"] = "duty"
        message_texte = "üõçÔ∏è Voici nos offres duty free. Quelle est votre destination ?"
    elif body_lower in ["1", "2", "3", "4", "5", "6"]:
        message_texte = "‚ú≥Ô∏è Merci pour votre choix. Veuillez pr√©ciser les d√©tails."
    elif session_memory[From].get("last_intent") == "hotel":
        session_memory[From]["ville"] = Body
        message_texte = f"üìÖ Merci ! Nous allons chercher un h√¥tel √† {Body}. Souhaitez-vous ajouter une date ?"
    elif session_memory[From].get("last_intent") == "restaurant":
        session_memory[From]["ville"] = Body
        message_texte = f"üçΩÔ∏è Tr√®s bien ! Nous cherchons un restaurant √† {Body}."
    elif session_memory[From].get("last_intent") == "plat":
        session_memory[From]["plat"] = Body
        message_texte = f"‚úÖ Not√© ! Plat command√© : {Body}."
    elif session_memory[From].get("last_intent") == "artisan":
        session_memory[From]["produit"] = Body
        message_texte = f"üé® Tr√®s bon choix ! Nous allons vous proposer des {Body} artisanaux."
    else:
        message_texte = (
            "üëã Bienvenue chez Askley !\n"
            "1Ô∏è‚É£ R√©server un h√¥tel\n"
            "2Ô∏è‚É£ R√©server un restaurant\n"
            "3Ô∏è‚É£ Commander un plat\n"
            "4Ô∏è‚É£ Produits artisanaux\n"
            "5Ô∏è‚É£ Plats faits maison\n"
            "6Ô∏è‚É£ Offres hors taxes"
        )

    # V√©rification du format du num√©ro d'exp√©diteur Twilio
    if not TWILIO_PHONE_NUMBER or not TWILIO_PHONE_NUMBER.startswith("whatsapp:"):
        error_msg = "Num√©ro Twilio mal configur√©. V√©rifiez TWILIO_WHATSAPP_FROM."
        print(f"‚ùå Erreur : {error_msg}")
        return JSONResponse(content={"error": error_msg}, status_code=400)

    try:
        message = client.messages.create(
            from_=TWILIO_PHONE_NUMBER,
            body=message_texte,
            to=From
        )
        print(f"üì§ R√©ponse : {message_texte}")
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return JSONResponse(content={"error": str(e)}, status_code=400)

    return {"status": "ok"}
